pragma solidity ^0.4.0;contract high_low{ uint256 game_id; struct broker { uint256 stake_amount; } mapping(address=>broker)broker_map; address[] broker_address; address[] trader_address; mapping(uint256=>address)game_id_map; struct game_set { string stock_name; uint256 strike_price; uint256 expiry_time; } mapping(address=>mapping(uint256=>game_set))game_set_map; struct bet_no { uint256 number; } mapping(address=>bet_no)no_bets; function check_broker() constant returns(bool newuser) { uint256 i=0; do { if(broker_address.length==0) { return true; } else if(broker_address[i]==msg.sender) { return false; } i++; }while(i<broker_address.length); return (true); } function add_broker() payable returns (bool is_added,uint256 stake_amount_is) { broker_map[msg.sender].stake_amount=msg.value; broker_address.push(msg.sender); return (true,broker_map[msg.sender].stake_amount); } function broker_set_game(string stock_name,uint256 strike_price,uint256 expiry_time) payable returns(bool newbet,uint256 new_game_id) { require(expiry_time>now); game_set_map[msg.sender][no_bets[msg.sender].number].stock_name=stock_name; game_set_map[msg.sender][no_bets[msg.sender].number].strike_price=strike_price; game_set_map[msg.sender][no_bets[msg.sender].number].expiry_time=expiry_time; game_id_map[game_id]=msg.sender; game_id++; no_bets[msg.sender].number++; return (true,(game_id-1)); } function add_broker_stake(uint256 input_amount) returns(bool amount_added,uint256 stake_amount_is) { require(input_amount==msg.value && input_amount>0); broker_map[msg.sender].stake_amount+=input_amount; return (true,broker_map[msg.sender].stake_amount); } function new_trader() payable returns(bool is_added) { trader_address.push(msg.sender); return true; } function check_trader() constant returns(bool is_trader) { uint256 i=0; do { if(trader_address.length==0) { return true; } else if(trader_address[i]==msg.sender) { return false; } i++; }while(i<trader_address.length); return (true); } function betting_check() { broker_map[game_id_map[game_id]].stake_amount>=input_amount } function betting(uint256 input_amount,uint256 game_id) payable { require(); require(input_amount==msg.value && input_amount>0); broker_map[msg.sender].stake_amount+=input_amount; }}
